# The play operates on the local (Ansible control) machine.
- name: Instance provisioning
  hosts: localhost
  connection: local
  remote_user: ubuntu
  gather_facts: false

  vars:
      keypair: ansible
      instance_type: t2.micro
      security_group: default
      image: ami-f878bc98
      region: "us-west-2"
      name_tag: "production"

  tasks:
      - name: Create a security group
        local_action:
         module: ec2_group
         name: "{{ security_group }}"
         description: Security Group for amagi Servers
         region: "{{ region }}"
         rules:
           - proto: tcp
             type: ssh
             from_port: 22
             to_port: 22
             cidr_ip: 0.0.0.0/0
           - proto: tcp
             from_port: 80
             to_port: 80
             cidr_ip: 0.0.0.0/0
           - proto: tcp
             type: Custom TCP Rule
             from_port: 5000
             to_port: 5000
             cidr_ip: 0.0.0.0/0
           - proto: tcp
             from_port: 443
             to_port: 443
             cidr_ip: 0.0.0.0/0
             rules_egress:
           - proto: all
             type: all
             cidr_ip: 0.0.0.0/0

  tasks:
    - name: Launch instance
      ec2: keypair={{keypair}} group={{security_group}}
           instance_type={{instance_type}} image={{image}} region={{region}}
           wait=true count=1
      register: ec2
    
     
    - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
      local_action: lineinfile
       dest="./inventory/{{name_tag}}/hosts"
       regexp={{ item.private_ip }}
       insertafter="[{{name_tag}}]" line={{ item.private_ip }}
      with_items: ec2.instances

    # Use with_items to add each instances public IP to a new hostgroup for use in the next play.

    - name: Add new instances to host group
      add_host: hostname={{item.private_ip}} groupname={{ name_tag }}
      with_items: ec2.instances

    - name: Wait for the instances to boot by checking the ssh port
      wait_for: host={{item.public_dns_name}} port=22 delay=60 timeout=320 state=started
      with_items: ec2.instances
    
    - name: Add tag to Instance(s)
      local_action: ec2_tag resource={{ item.id }} region={{region}}  state=present
      with_items: ec2.instances

      args:
       tags:
        Name: "{{ name_tag }}"


# This play targets the new host group
- name: Configure instance
  hosts: production
  remote_user: ubuntu
  sudo: yes

  # Do some stuff on each instance ....

  tasks:
   - name: Install list of packages
     apt: name={{ item }} state=installed
     with_items:
       - nginx
       - python-pip
       - python-dev
       - build-essential

   - pip: name=flask
   - pip: name=uwsgi
   - pip: name=virtualenv

   - name: Transfer the file
     copy: src=/etc/ansible/hello.py dest=/home/ubuntu/ mode=0777

   - name: Running a python script
     command: "/usr/bin/screen -d -m python /home/ubuntu/hello.py"
     async: True
     poll: 0

